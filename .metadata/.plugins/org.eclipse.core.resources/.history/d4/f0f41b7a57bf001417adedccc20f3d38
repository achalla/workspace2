package solutions;

import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;


public class ThreadedAVLTree<T extends Comparable<T>> {
	
	public Node<T> root = null;
	
	
	public static class Node<T extends Comparable<T>> implements Comparable<Node<T>>{

		public Node<T> left = null, right = null, parent = null,
						leftThread = null, rightThread = null;
		public int balanceFactor;
		public T datum;
		
		public Node(T datum){
			this.datum = datum;
			balanceFactor = 0;
		}
		
		public int compareTo(Node<T> n){
			return this.datum.compareTo(n.datum);
		}

	}
	
	
	

	public void insert(T key){//inserts as a bst
		if(root == null){
			root = new Node<T>(key);
		}
		else{
			insertHelper(key, root);
		}
	}
	
	
	
	
	
	
	public void balFactorizer(Node<T> n){
		Node<T> curr = n;
		if(n == null) System.out.println("this mofo is null");
		while(curr != null){
			curr.balanceFactor = getHeight(curr.right) - getHeight(curr.left);
		}
	}
	
	
	
	public void insertHelper(T curr, Node<T> other){//inserts as a bst
		if(curr.compareTo((T) other.datum) > 0){
			if(other.right == null){
				other.right = new Node<T>(curr);
				other.right.parent = other;
			}else{
				insertHelper(curr, other.right);
			}
		}else if(curr.compareTo(other.datum) < 0){
			if(other.left == null){
				other.left = new Node<T>(curr);
				other.left.parent = other;
			}else{
				insertHelper(curr,other.left);
			}
		}else{
			System.out.println("Duplicate");
		}
	}
	
	
	
	
	
	
	
	

	public int height(){//done
		if(root == null) return -1;
		return getHeight( root);
	}
	
	public int getHeight(Node<? extends Comparable<?>> n){//versatile method, good for overall height of
		//tree and for finding balanceFactor
		
		//conditionals based on # of children...
		if(n == null) return 0;
		if(n.left == null && n.right == null){ //BASE CASE: none
			return 0;
		}else if(n.left != null && n.right != null){//both
			return Math.max(getHeight(n.left) + 1,getHeight(n.right) + 1);
		}else if(n.right != null){//right
			return getHeight(n.right) + 1;
		}else{//left
			return getHeight(n.left) + 1;
		}
	}
	
	
	
	
	
	
	
	public int getBF(Node<T> n){
		int rightHeight = -1, leftHeight = -1;
		if(n.right == null) rightHeight = 0;
		else rightHeight = getHeight(n.right) + 1;
		if(n.left == null) leftHeight = 0;
		else leftHeight = getHeight(n.left) + 1;
		return rightHeight - leftHeight;
	}

	public boolean isEmpty(){//done
		if(root == null) return true;
		else return false;
	}
	
	
	
	
	
	/*
	 * 
	 * PRINTS
	 * 
	 * */
	
	
	public void printTreeByLevel(){
		Queue<Node> q = new PriorityQueue<Node>();
		Node temp;
		
		if(root == null) return;
		q.add(root);
		System.out.println(root.datum);
		while (q.peek() != null){
			temp = q.remove();
			if (temp.left != null){
				System.out.println(temp.left.datum);
				q.add(temp.left);
			}
			if (temp.right != null){
				System.out.println(temp.right.datum);
				q.add(temp.right);
			}
		}
	}
	
	
	
	

	public void printParents(){//works
		Queue<Node<T>> q = new PriorityQueue<Node<T>>();
		Node<T> temp;
		
		if(root == null) return;
		q.add((Node<T>) root);
		while (q.peek() != null){
			temp = q.remove();
			if(temp.parent != null )System.out.println(temp.datum+" parent: "+temp.parent.datum);
			if(temp.left != null) q.add(temp.left);
			if(temp.right != null) q.add(temp.right);
		}
	}
	
	
	public void printBalFactors(){//works
		Queue<Node<T>> q = new PriorityQueue<Node<T>>();
		Node<T> temp;
		
		if(root == null) return;
		q.add((Node<T>) root);
		while (q.peek() != null){
			temp = q.remove();
			System.out.println(temp.datum+" bal factor: "+getBF(temp));
			if(temp.left != null) q.add(temp.left);
			if(temp.right != null) q.add(temp.right);
		}
	}

	
	public void printHeights(){//works
		Queue<Node<T>> q = new PriorityQueue<Node<T>>();
		Node<T> temp;
		
		if(root == null) return;
		q.add((Node<T>) root);
		while (q.peek() != null){
			temp = q.remove();
			System.out.println(temp.datum+" height: "+getHeight(temp));
			if(temp.left != null) q.add(temp.left);
			if(temp.right != null) q.add(temp.right);
		}
	}
	
	
	
	public static void main(String[] args) {
		//50 25 75 24 35 51 100 23 27 36 52 150 38 125 37 127 126 -1
		int input;
		ArrayList<Integer> al = new ArrayList<Integer>();
		ThreadedAVLTree<Integer> t = new ThreadedAVLTree<Integer>();
		Scanner sc = new Scanner(System.in);
		while((input = sc.nextInt()) != -1){
			al.add(input);
		}
		
		sc.close();
		for(int i = 0; i < al.size(); i++){
			t.insert(al.get(i));
		}
		
		t.printTreeByLevel();
		System.out.println("\n\n");
		//t.printParents();
		//t.printBalFactors();
		
		System.out.println("Height is "+t.height());
		System.out.println("\n\n");
		//t.printHeights();
		t.printBalFactors();
	}
}
