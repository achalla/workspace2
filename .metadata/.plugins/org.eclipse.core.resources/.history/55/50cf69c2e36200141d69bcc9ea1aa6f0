package BinaryTree;

import java.util.AbstractQueue;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

class BST{

	static Node root;
	
	static Node preToBST(ArrayList<Integer> arr){
		int len = arr.size();
		root.datum = arr.get(0);
		Node temp = root, p;
		for(int i = 1; i < len; i++){
			Node n = new Node();
			n.datum = arr.get(i);
			
			if(arr.get(i) < arr.get(i-1)){
				temp.left = n;
				temp = temp.left;
			}else if(arr.get(i) > arr.get(i-1)){
				temp.right = n;
				temp = temp.right;
			}else{
				System.out.println("DANGER WILL ROBINSON");
			}
		}
		return root;
	}
	
	//public static BST pTBHelper(){
	//}
	static void decodeTree(Node n){
		ArrayList<Node> nArr = new ArrayList<Node>();
		Queue<Node> q = new PriorityQueue<Node>();
		Node temp;
		
		System.out.println(n.left.datum);
		System.out.println(n.right.datum);
		q.add(root);
		while (q.peek() != null){
			temp = q.remove();
			System.out.println(temp);
			if (temp.left != null){
				q.add(temp.left);
			}
			if (temp.right != null){
				q.add(temp.right);
			}
		}
	}
	
	
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		ArrayList<Integer> al = new ArrayList<Integer>();
		int curr = 0;
		
		while(curr != -1){
			int a = sc.nextInt();
			al.add(a);
			curr = a;
		}
		System.out.println(al);
		Node temp2 = preToBST(al);
		System.out.println(temp2);
		decodeTree(temp2);
		System.out.println(temp2);
	}

}
